generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DRIVER
  MANAGER
  TECHNICIAN
  USER
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  role          UserRole       @default(DRIVER)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  driver        Driver?
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.VarChar(500)
  expiresAt DateTime @map("expires_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "refresh_tokens_user_id_fkey")
  @@map("refresh_tokens")
}

model Driver {
  id                String                    @id @default(uuid())
  userId            String                    @unique @map("user_id")
  name              String
  licenseNumber     String                    @map("license_number")
  licenseExpiry     DateTime                  @map("license_expiry")
  phoneNumber       String                    @map("phone_number")
  driverScore       Float?                    @map("driver_score")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  aiRecommendations AIRecommendation[]
  evaluations       DriverEvaluation[]
  assignedVehicles  DriverVehicleAssignment[]
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips             Trip[]

  @@map("drivers")
}

model Vehicle {
  id                String                    @id @default(uuid())
  model             String
  year              Int
  plateNumber       String                    @unique @map("plate_number")
  status            String
  fuelType          String                    @map("fuel_type")
  fuelLevel         Float                     @map("fuel_level")
  insuranceExpiry   DateTime                  @map("insurance_expiry")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  aiRecommendations AIRecommendation[]
  alerts            Alert[]
  components        Component[]
  assignedDrivers   DriverVehicleAssignment[]
  maintenance       Maintenance[]
  trips             Trip[]

  @@map("vehicles")
}

model DriverVehicleAssignment {
  driverId   String   @map("driver_id")
  vehicleId  String   @map("vehicle_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  driver     Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@id([driverId, vehicleId])
  @@index([vehicleId], map: "driver_vehicle_assignments_vehicle_id_fkey")
  @@map("driver_vehicle_assignments")
}

model Component {
  id                String             @id @default(uuid())
  vehicleId         String             @map("vehicle_id")
  componentType     String             @map("component_type")
  name              String
  status            String
  healthScore       Float              @map("health_score")
  expectedLifespan  Int                @map("expected_lifespan")
  metadata          String?            @db.LongText
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  aiRecommendations AIRecommendation[]
  alerts            Alert[]
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  maintenance       Maintenance[]

  @@index([vehicleId], map: "components_vehicle_id_fkey")
  @@map("components")
}

model Trip {
  id                String             @id @default(uuid())
  vehicleId         String             @map("vehicle_id")
  driverId          String             @map("driver_id")
  startLocation     String?             @map("start_location") @db.LongText
  endLocation       String?            @map("end_location") @db.LongText
  startLatitude     Float?             @map("start_latitude")
  startLongitude    Float?             @map("start_longitude")
  endLatitude       Float?             @map("end_latitude")
  endLongitude      Float?             @map("end_longitude")
  startTime         DateTime           @map("start_time")
  endTime           DateTime?          @map("end_time")
  distance          Float?
  fuelConsumed      Float?             @map("fuel_consumed")
  status            String
  updatedAt         DateTime           @updatedAt @map("updated_at")
  aiRecommendations AIRecommendation[]
  evaluation        DriverEvaluation?
  metrics           TripMetric[]
  driver            Driver             @relation(fields: [driverId], references: [id], onDelete: Cascade)
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([driverId], map: "trips_driver_id_fkey")
  @@index([vehicleId], map: "trips_vehicle_id_fkey")
  @@map("trips")
}

model TripMetric {
  id              String   @id @default(uuid())
  tripId          String   @map("trip_id")
  speed           Float?
  acceleration    Float?
  braking         Float?
  fuelConsumption Float?   @map("fuel_consumption")
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now()) @map("created_at")
  trip            Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId], map: "trip_metrics_trip_id_fkey")
  @@map("trip_metrics")
}

model DriverEvaluation {
  id                    String   @id @default(uuid())
  driverId              String   @map("driver_id")
  tripId                String   @unique @map("trip_id")
  safetyScore           Float    @map("safety_score")
  fuelEfficiencyScore   Float    @map("fuel_efficiency_score")
  speedingInstances     Int      @map("speeding_instances")
  hardBrakingCount      Int      @map("hard_braking_count")
  hardAccelerationCount Int      @map("hard_acceleration_count")
  distractionScore      Float    @map("distraction_score")
  overallScore          Float    @map("overall_score")
  recommendations       String?  @db.LongText
  createdAt             DateTime @default(now()) @map("created_at")
  driver                Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  trip                  Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([driverId], map: "driver_evaluations_driver_id_fkey")
  @@map("driver_evaluations")
}

model Alert {
  id             String     @id @default(uuid())
  type           String
  vehicleId      String     @map("vehicle_id")
  componentId    String?    @map("component_id")
  message        String     @db.Text
  actionRequired Boolean    @map("action_required")
  createdAt      DateTime   @default(now()) @map("created_at")
  resolvedAt     DateTime?  @map("resolved_at")
  component      Component? @relation(fields: [componentId], references: [id])
  vehicle        Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([componentId], map: "alerts_component_id_fkey")
  @@index([vehicleId], map: "alerts_vehicle_id_fkey")
  @@map("alerts")
}

model Maintenance {
  id              String     @id @default(uuid())
  vehicleId       String     @map("vehicle_id")
  componentId     String?    @map("component_id")
  maintenanceType String     @map("maintenance_type")
  description     String     @db.Text
  metadata        String?    @db.LongText
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  component       Component? @relation(fields: [componentId], references: [id])
  vehicle         Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([componentId], map: "maintenance_component_id_fkey")
  @@index([vehicleId], map: "maintenance_vehicle_id_fkey")
  @@map("maintenance")
}

model AIRecommendation {
  id                 String     @id @default(uuid())
  targetType         String     @map("target_type")
  targetId           String     @map("target_id")
  recommendationType String     @map("recommendation_type")
  priority           String
  description        String     @db.Text
  suggestedAction    String     @map("suggested_action") @db.Text
  metadata           String?    @db.LongText
  createdAt          DateTime   @default(now()) @map("created_at")
  driverId           String?    @map("driver_id")
  vehicleId          String?    @map("vehicle_id")
  componentId        String?    @map("component_id")
  tripId             String?    @map("trip_id")
  component          Component? @relation(fields: [componentId], references: [id])
  driver             Driver?    @relation(fields: [driverId], references: [id])
  trip               Trip?      @relation(fields: [tripId], references: [id])
  vehicle            Vehicle?   @relation(fields: [vehicleId], references: [id])

  @@index([componentId], map: "ai_recommendations_component_id_fkey")
  @@index([driverId], map: "ai_recommendations_driver_id_fkey")
  @@index([tripId], map: "ai_recommendations_trip_id_fkey")
  @@index([vehicleId], map: "ai_recommendations_vehicle_id_fkey")
  @@map("ai_recommendations")
}
