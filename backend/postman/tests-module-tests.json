{
	"info": {
		"_postman_id": "b8ac2f58-5a9d-4d05-b3c2-f6de7cc4c52e",
		"name": "Tests Module",
		"description": "A collection for testing the Tests module of the starter kit.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3005/api/v1",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Auth (Setup)",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user to obtain authentication tokens for subsequent requests."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data.accessToken).to.be.a('string');",
									"    pm.expect(jsonData.data.refreshToken).to.be.a('string');",
									"    ",
									"    // Save tokens as variables for other requests",
									"    pm.collectionVariables.set(\"authToken\", jsonData.data.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", jsonData.data.refreshToken);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login to get authentication tokens."
					},
					"response": []
				}
			],
			"description": "Authentication requests needed to set up tokens for the Tests module endpoints."
		},
		{
			"name": "Tests CRUD",
			"item": [
				{
					"name": "Create Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('description');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    ",
									"    // Save test ID for future requests",
									"    pm.collectionVariables.set(\"testId\", jsonData.data.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sample Test\",\n    \"description\": \"This is a test created via Postman\",\n    \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Create a new test entry."
					},
					"response": []
				},
				{
					"name": "Create Test (Invalid Data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"te\",\n    \"description\": \"short\",\n    \"status\": \"invalid-status\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Test validation by sending invalid data."
					},
					"response": []
				},
				{
					"name": "Get All Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tests array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data.data).to.be.an('array');",
									"    pm.expect(jsonData.data.pagination).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Get all test entries with pagination."
					},
					"response": []
				},
				{
					"name": "Get Tests By Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has filtered tests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    ",
									"    // Check that all returned tests have the requested status",
									"    if (jsonData.data.length > 0) {",
									"        jsonData.data.forEach(function(test) {",
									"            pm.expect(test.status).to.eql(\"pending\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/status/pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"status",
								"pending"
							]
						},
						"description": "Get test entries filtered by status."
					},
					"response": []
				},
				{
					"name": "Get Test By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct test data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.eql(pm.collectionVariables.get(\"testId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Get a specific test entry by ID."
					},
					"response": []
				},
				{
					"name": "Activate Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates test was activated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.eql(pm.collectionVariables.get(\"testId\"));",
									"    pm.expect(jsonData.data.status).to.eql(\"active\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}/activate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}",
								"activate"
							]
						},
						"description": "Activate a specific test."
					},
					"response": []
				},
				{
					"name": "Update Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response shows updated test data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data.id).to.eql(pm.collectionVariables.get(\"testId\"));",
									"    pm.expect(jsonData.data.name).to.eql(\"Updated Test Name\");",
									"    pm.expect(jsonData.data.description).to.eql(\"This test has been updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Test Name\",\n    \"description\": \"This test has been updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Update a specific test."
					},
					"response": []
				},
				{
					"name": "Delete Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response indicates successful deletion\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.message).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Delete a specific test."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing test entries."
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Get Non-existent Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates not found error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/non-existent-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"non-existent-id"
							]
						},
						"description": "Try to get a non-existent test to test error handling."
					},
					"response": []
				},
				{
					"name": "Access Without Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response indicates authentication error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Try to access a protected endpoint without authentication to test auth middleware."
					},
					"response": []
				},
				{
					"name": "Invalid Status Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response indicates invalid status parameter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tests/status/invalid-status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"status",
								"invalid-status"
							]
						},
						"description": "Try to filter by an invalid status to test validation."
					},
					"response": []
				}
			],
			"description": "Tests that verify error handling in the Tests module."
		}
	]
} 