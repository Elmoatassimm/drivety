
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expiresAt: 'expiresAt',
  userId: 'userId'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  licenseNumber: 'licenseNumber',
  licenseExpiry: 'licenseExpiry',
  phoneNumber: 'phoneNumber',
  driverScore: 'driverScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  model: 'model',
  year: 'year',
  plateNumber: 'plateNumber',
  status: 'status',
  fuelType: 'fuelType',
  fuelLevel: 'fuelLevel',
  insuranceExpiry: 'insuranceExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverVehicleAssignmentScalarFieldEnum = {
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  assignedAt: 'assignedAt'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  componentType: 'componentType',
  name: 'name',
  status: 'status',
  healthScore: 'healthScore',
  expectedLifespan: 'expectedLifespan',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  startLocation: 'startLocation',
  endLocation: 'endLocation',
  startLatitude: 'startLatitude',
  startLongitude: 'startLongitude',
  endLatitude: 'endLatitude',
  endLongitude: 'endLongitude',
  startTime: 'startTime',
  endTime: 'endTime',
  distance: 'distance',
  fuelConsumed: 'fuelConsumed',
  status: 'status',
  updatedAt: 'updatedAt'
};

exports.Prisma.TripMetricScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  speed: 'speed',
  acceleration: 'acceleration',
  braking: 'braking',
  fuelConsumption: 'fuelConsumption',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt'
};

exports.Prisma.DriverEvaluationScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  tripId: 'tripId',
  safetyScore: 'safetyScore',
  fuelEfficiencyScore: 'fuelEfficiencyScore',
  speedingInstances: 'speedingInstances',
  hardBrakingCount: 'hardBrakingCount',
  hardAccelerationCount: 'hardAccelerationCount',
  distractionScore: 'distractionScore',
  overallScore: 'overallScore',
  recommendations: 'recommendations',
  createdAt: 'createdAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  message: 'message',
  actionRequired: 'actionRequired',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  maintenanceType: 'maintenanceType',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIRecommendationScalarFieldEnum = {
  id: 'id',
  targetType: 'targetType',
  targetId: 'targetId',
  recommendationType: 'recommendationType',
  priority: 'priority',
  description: 'description',
  suggestedAction: 'suggestedAction',
  metadata: 'metadata',
  createdAt: 'createdAt',
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  tripId: 'tripId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password'
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.DriverOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  licenseNumber: 'licenseNumber',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.VehicleOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  plateNumber: 'plateNumber',
  status: 'status',
  fuelType: 'fuelType'
};

exports.Prisma.DriverVehicleAssignmentOrderByRelevanceFieldEnum = {
  driverId: 'driverId',
  vehicleId: 'vehicleId'
};

exports.Prisma.ComponentOrderByRelevanceFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  componentType: 'componentType',
  name: 'name',
  status: 'status',
  metadata: 'metadata'
};

exports.Prisma.TripOrderByRelevanceFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  startLocation: 'startLocation',
  endLocation: 'endLocation',
  status: 'status'
};

exports.Prisma.TripMetricOrderByRelevanceFieldEnum = {
  id: 'id',
  tripId: 'tripId'
};

exports.Prisma.DriverEvaluationOrderByRelevanceFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  tripId: 'tripId',
  recommendations: 'recommendations'
};

exports.Prisma.AlertOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  message: 'message'
};

exports.Prisma.MaintenanceOrderByRelevanceFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  maintenanceType: 'maintenanceType',
  description: 'description',
  metadata: 'metadata'
};

exports.Prisma.AIRecommendationOrderByRelevanceFieldEnum = {
  id: 'id',
  targetType: 'targetType',
  targetId: 'targetId',
  recommendationType: 'recommendationType',
  priority: 'priority',
  description: 'description',
  suggestedAction: 'suggestedAction',
  metadata: 'metadata',
  driverId: 'driverId',
  vehicleId: 'vehicleId',
  componentId: 'componentId',
  tripId: 'tripId'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  DRIVER: 'DRIVER',
  MANAGER: 'MANAGER',
  TECHNICIAN: 'TECHNICIAN',
  USER: 'USER'
};

exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  Driver: 'Driver',
  Vehicle: 'Vehicle',
  DriverVehicleAssignment: 'DriverVehicleAssignment',
  Component: 'Component',
  Trip: 'Trip',
  TripMetric: 'TripMetric',
  DriverEvaluation: 'DriverEvaluation',
  Alert: 'Alert',
  Maintenance: 'Maintenance',
  AIRecommendation: 'AIRecommendation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
